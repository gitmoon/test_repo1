import re
from tests.config.config import USB_DEVICE_NAME
from tests.common.common_const import CommonConst
from tests.config.config import USB_DEVICE_NAME, TEST_HOST_IP_ADDR, NETWORKING_UDP_PORT, NETWORKING_TCP_PORT


class CommonRegex:
    LINUX_KERNEL_VERSION = re.compile(r"\d\.\d\d\.\d\d-linux4sam-\d\.\d")
    TYPE_COMMAND_RESULT = re.compile(r"\w+ is .+")
    FIND_LIBDBUS_RESULT = re.compile(r".+/libdbus.*\.so.*")
    COMMAND_NOT_FOUND = re.compile(r"^-sh: \w+: command not found$")
    PATH_FILE_NOT_FOUND = re.compile(r".+: No such file or directory")
    FONT_FORMATS = re.compile(r"\.ttf|\.otf")
    DRAM_SIZE_COMMAND_RESULT = re.compile(r"\d+K")
    GPU_MEM_SIZE_COMMAND_RESULT = re.compile(r"Total")
    TOTAL_GPU_MEM_SIZE = re.compile(r"[ ]+Total[ ]+:[ ]+(\d+)[ ]+B")
    MMC_INFO_CAPACITY_COMMAND_RESULT = re.compile(r"^Capacity")
    MMC_INFO_CAPACITY_VALUE = re.compile(r":[ ]+(\d+.\d+)")
    USB_MOUNT_POINT = re.compile(rf"{USB_DEVICE_NAME}$")
    LIST_DIR_COMMAND_RESULT = re.compile(r"^(?!ls)")
    MD5_CHECKSUM_COMMAND_RESULT = re.compile(r"^[^A-Z]{32}  ")
    BAD_PING = re.compile(r"(\d+ packets transmitted, 0 received, 100% packet loss)|(\d+ packets transmitted, 0 packets received, 100% packet loss)|(.+: Network is unreachable)")
    GOOD_PING = re.compile(r"(\d+ packets transmitted, \d+ received, 0% packet loss)|(\d+ packets transmitted, \d+ packets received, 0% packet loss)")
    DATE_RESULT = re.compile(r"\w+ \w+ .+ \d\d:\d\d:\d\d \w+ \d+")
    ETH0_READY = re.compile(r"eth0: link becomes ready")
    WLAN0_READY = re.compile(r"wlan0: link becomes ready")
    WLAN_ACTIVATED = re.compile(r"Device '.+' successfully activated")
    WLAN_SSID_NOT_FOUND = re.compile(r"Error: No network with SSID \'.*\' found\.")
    WLAN_CONN_FAILED = re.compile(r"Error: Connection activation failed:")
    UBOOT_IP_ADDR_ERROR = re.compile(r"Error: ethernet@\w+ address not set\.")
    UBOOT_PING_FAILED = re.compile(r"^ping failed; host .+ is not alive")
    UBOOT_PING_SUCCESS = re.compile(r"^host .+ is alive")
    UBOOT_CURRENT_I2C_DEV = re.compile(rf"^{CommonConst.CURRENT_I2C_DEV}")
    UBOOT_I2C_BUS_READ = re.compile(r"^\d\d\d\d: ")
    UBOOT_ENV_NOT_DEFINED = re.compile(r"^## Error: .\w+. not defined$")
    UBOOT_ENV_PRINT_RESULT = re.compile(r"\w+=\w+")
    UBOOT_SAVEENV_DONE = re.compile(r"^Saving Environment to FAT... OK$")
    UBOOT_BOARD_ID = re.compile(r"Board ID:")
    UBOOT_PANEL_ID = re.compile(r"Panel ID:")
    RESPONCE_FROM_UDP = re.compile(rf"Echo from {TEST_HOST_IP_ADDR}:{NETWORKING_UDP_PORT}\. Data: {CommonConst.TEST_PHRASE}")
    IP_ADDRESS = re.compile(r"\d+\.\d+\.\d+\.\d+")
    NC_ZV_RESULT = re.compile(f".*{TEST_HOST_IP_ADDR}.*{NETWORKING_TCP_PORT} open")
    RESPONCE_FROM_TCP = re.compile(
        rf"Echo from {TEST_HOST_IP_ADDR}:{NETWORKING_TCP_PORT}\. Data: {CommonConst.TEST_PHRASE}")
    AVAHI_SERVICE = re.compile(r"avahi-daemon.service")
    UDHCPC_STARTED = re.compile(r"udhcpc: started, v\d+\.\d+\.\d+")
    UDHCPC_LEASE_OBTAINED = re.compile(r"lease of \d+\.\d+\.\d+\.\d+ obtained, lease time 43200")
    UDHCPC_ADDING_DNS = re.compile(r"Adding DNS \d+\.\d+\.\d+\.\d+")
    NMCLI_VERSION_RESULT = re.compile(r"nmcli tool, version .+")
    IPTABLES_VERSION_RESULT = re.compile(r"iptables v.+")
    IFCONFIG_IP_BCAST_MASK = re.compile(r"inet .+  netmask .+  broadcast .+")
    IP_ROUTE_DEFAULT_ROUTE = re.compile(r"default via .+ dev .+")
    AVAHI_DAEMON_SERVICE_RESULT = re.compile(r"avahi-daemon.service")
    SSH_VERSION_RESULT = re.compile("OpenSSH")
    ETHTOOL_SPEED = re.compile(r"Speed: .+b/s")
    ETHTOOL_DUPLEX = re.compile(r"Duplex: (Full|Half)")
    ETHTOOL_AUTONEG = re.compile(r"Auto-negotiation: (on|off)")
    IFCONFIG_HWADDR = re.compile(r"ether \w{2}:\w{2}:\w{2}:\w{2}:\w{2}:\w{2}")
    MAC_DOTTED = re.compile(r"\w{2}:\w{2}:\w{2}:\w{2}:\w{2}:\w{2}")
    MAC_SEPARATED = re.compile(r"\w{2} \w{2} \w{2} \w{2} \w{2} \w{2}")
    MAC_MULTICAST = re.compile(r"ff ff ff ff ff ff")
    MAC_LOCAL = re.compile(r"\w[26ae] \w{2} \w{2} \w{2} \w{2} \w{2}")
    READ_MAC_EMMC = re.compile(r"Read mac-address from EMMC \(/eth_mac\) : .+")
    READ_MAC_EEPROM = re.compile(r"Read mac-address from EEPROM : .+")
    WILL_STORE_MAC = re.compile(r"Will store mac-address .+")
    WILL_STORE_MAC_DOTTED = re.compile(r"Will store mac-address (\w{2}:\w{2}:\w{2}:\w{2}:\w{2}:\w{2})")
    SETSERIAL_VERSION_RESULT = re.compile(r"setserial version \d+\.\d+, \d+-\w{3}-\d{4}")
    ALL_VOLTAGE_CHANNELS_RESULT = re.compile(
        r"/sys/bus/iio/devices/iio:device0/in_voltage[0-3]_channel[0-3]_raw")
    SYSTEM_TEMPERATURE_VALUE = re.compile(r"^\d{4,6}$")
    GDB_VERSION_RESULT = re.compile(r"GNU gdb \(GDB\) \d+\.\d+")
    VALGRIND_VERSION_RESULT = re.compile(r"valgrind-.+")
    LIBQT5_ALL_SO_5_6_OR_NEWER = re.compile(r"\.so\.5\.[6-9]|([1-9][0-9]+)")
    LIBEGL_ALL_SO = re.compile(r"libEGL.*\.so.*")
    LIBGLESV2_ALL_SO = re.compile(r"libGLESv2.*\.so.*")
    QT_QML_FILES = re.compile(r".+\.qml")
    USR_LIB_QML_FIND_QML = re.compile(r"QtQml")
    USR_LIB_QML_FIND_QUICK = re.compile(r"QtQuick")
    LIBQT5_FIND_SERIALPORT = re.compile(r"libQt5SerialPort\.so")
    LIBQT5DBUS_ALL_SO = re.compile(r"libQt5DBus\.so")
    LIBGSTREAMER = re.compile(r"/usr/lib/libgstreamer.*\.so")
    FBSET_RESULT = re.compile(r"rgba 8/16,8/8,8/0,0/0")
    BACKLIGHT_POWER_ON = re.compile(r"^0$")
    ADC_RAW_VALUE_RESULT = re.compile(r"^\d+$")
    CAN_DEV_BUSY = re.compile(r"answers: Device or resource busy")
    USBSTORAGE = re.compile(r"usbstorage")
    MKDIR_ERROR = re.compile(r"mkdir: cannot create directory '.+': .+")
    BSP_VERSION_RESULT = re.compile(r"^WELBILT_DVT_BSP_\d+\.\d+\.\d+$")
    RESULT_HW_MANAGER = re.compile(r"hardware-manager-\d+\.\d+-r\d+")
    RESULT_SCREENGRABBER = re.compile(r"screengrabber-\d+\.\d+-r\d+")
    FW_PCKG_VERSION = re.compile(r"\d{8,}")
    BAD_LINUX_KERNEL = re.compile(r"Bad Linux ARM zImage magic!")
    LSMOD_ATH10K = re.compile(r"ath10k")
    IW_ERROR = re.compile(r"(Operation not supported)|(Invalid parameter:)")
    IW_LINK_SSID = re.compile(r"SSID: .+")
    IW_POWER_1DBM = re.compile("Tx-Power=1 dBm")
    IW_POWER_15DBM = re.compile("Tx-Power=15 dBm")
    IW_POWER_20DBM = re.compile("Tx-Power=20 dBm")
    WIFI_CHANNEL_LIST = re.compile(r"Channel \d+ : .+ GHz")
    WIFI_COUNTRY_GB = re.compile("country GB")
    WIFI_COUNTRY_US = re.compile("country US")
    LSMOD_BTWILINK = re.compile(r"btwilink\s+\d+\s+\d+")
    DMESG_RESULT_RTC = re.compile(r"\[.*\] at91_rtc f80480b0.rtc: registered as rtc0")
    DMESG_RESULT_TAS_AUDIO = re.compile(r"\[.*\].*tas5756-audio")
    LS_ALSA_LIB_RESULT = re.compile(r"/usr/lib/alsa-lib/.+\.so")
    FIND_ALSA_MODULES_RESULT = re.compile(r"/usr/lib/alsa-lib/libasound_module_.+\.so")
    BOARD_ID_ON_BOOT = re.compile("Board ID:0x[0123456789ABCDEFabcdef]{2}")
    WB_FDT_FILE = re.compile("fdt_file=imx6sx-welbilt.dtb")
    USB_ROLE = re.compile("host|gadget")
    USER_NAME = re.compile("root|welbilt")
    EMMC_PARTITION_4 = re.compile("mmcblk0p4")
    SDCARD_PARTITION_4 = re.compile("mmcblk2p4")
